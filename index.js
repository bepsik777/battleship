(()=>{"use strict";const t=t=>{let e=0;return{getLength:()=>t,hit:()=>(e+=1,e),isSunk:()=>e===t,getNumberOfHits:()=>e}},e=t(1);e.hit(),console.log(e.getLength());const n=()=>{const e=[],n=()=>e;function o(t,e){return{position:[t,e],occupiedByShip:!1,hit:!1,ship:null,board:n()}}function i(t){if(!t)return!1;const e=n();let o=[];const i=[],r=[];return t.forEach((t=>{const n=t.position[0],o=t.position[1];[[n-1,o-1],[n-1,o],[n-1,o+1],[n,o+1],[n+1,o+1],[n+1,o],[n+1,o-1],[n,o-1]].forEach((t=>{!1===a(t[0],t[1])&&r.push(e[t[0]][t[1]])}))})),o=r.filter((e=>!1===t.includes(e))),o.forEach((t=>{i.includes(t)||i.push(t)})),i}function r(t,e,n,o,i){const r=[];for(let s=0;s<t;s++)if("horizontal"===o){if(a(e,n+s))return!1;r.push(i[e][n+s])}else if("vertical"===o){if(a(e+s,n))return!1;r.push(i[e+s][n])}return r}function a(t,e){return t<0||t>9||e<0||e>9}function s(t){return!0===t.occupiedByShip}function c(t,e){return!!t&&!t.some(s)&&!e.some(s)}function l(e,o,a,s="horizontal"){const l=r(e,o,a,s,n());if(!c(l,i(l)))return!1;const d=t(e);return l.forEach((t=>{t.occupiedByShip=!0,t.ship=d})),d}return{createField:o,initGameboard:function(){for(let t=0;t<10;t++){const n=[];for(let e=0;e<10;e++)n.push(o(t,e));e.push(n)}},printBoard:function(){e.forEach((t=>{let e="";t.forEach((t=>{t.occupiedByShip||t.hit?!t.occupiedByShip&&t.hit?e+="|  -  |":t.occupiedByShip&&!t.hit?e+="|  O  |":t.occupiedByShip&&t.hit&&(e+="|  X  |"):e+=`| ${t.position} |`})),console.log(e)}))},getBoard:n,findTargetFields:r,findNeighbourFields:i,canShipBePlaced:c,placeShip:l,receiveAttack:function(t,n){return!a(t,n)&&!e[t][n].hit&&(null!==e[t][n].ship&&e[t][n].ship.hit(),e[t][n].hit=!0,e[t][n])},areAllShipsSunk:function(){const t=[];return e.forEach((e=>{const n=e.filter((t=>!0===t.occupiedByShip));t.push(...n)})),!!t.every((t=>!0===t.hit))},placeShipsRandomly:function(t){const e=[];let n=1;for(;e.length!==t;){const t=Math.floor(10*Math.random()),o=Math.floor(10*Math.random());let i;switch(Math.floor(2*Math.random())){case 1:i="vertical";break;case 0:i="horizontal"}const r=l(n,t,o,i);!1!==r&&(e.push(r),n++)}}}};let o,i,r,a=0;function s(t,e,n){return!(t>9||t<0||e<0||e>9)&&!0!==n[t][e].hit}function c(){return[Math.floor(10*Math.random()),Math.floor(10*Math.random())]}const l=(t,e)=>{const n=t;let l=e;function d(t){const e=t.getPlayersTurn();switch(l){case!0:l=!1;break;case!1:l=!0}switch(e){case!0:t.setPlayersTurn(!1);break;case!1:t.setPlayersTurn(!0)}}return{attack:function(t,e,l,u){if(d(e),!n)return t.receiveAttack(l,u);!function(t){if(void 0!==o&&!0===o.isSunk()&&(a=0,o=void 0),1===a){const e=function(t,e){const n=t.position[0],o=t.position[1],i=[[n,o+1],[n,o-1],[n+1,o],[n-1,o]].filter((t=>s(t[0],t[1],e.getBoard())));return i}(i,t),n=e[Math.floor(Math.random()*e.length)];return r=t.receiveAttack(...n),void(null!==r.ship&&(a+=1))}if(a>1){if(r.position[0]>i.position[0]||r[1]>i[1]){let t=i;i=r,r=t}const e=function(t,e,n){let o=t.position[0],i=t.position[1],r=e.position[0],a=e.position[1];const c=[];let l;if(o===r?l="horizontal":i===a&&(l="vertical"),"horizontal"===l){i>a&&(o=e.position[0],i=e.position[1],r=t.position[0],a=t.position[1]);const n=[o,i-1],s=[r,a+1];c.push(n,s)}else if("vertical"===l){o>r&&(o=e.position[0],i=e.position[1],r=t.position[0],a=t.position[1]);const n=[o-1,i],s=[r+1,a];c.push(n,s)}return c.filter((t=>s(t[0],t[1],n.getBoard())))}(i,r,t),n=e[Math.floor(Math.random()*e.length)],o=t.receiveAttack(...n);return void(null!==o.ship&&o.position[0]<i.position[0]||o.position[1]<i.position[1]?(r=o,a+=1):null!==o.ship&&(o.position[0]>i.position[0]||o.position[1]>i.position[1])&&(i=o,a+=1))}let e=c();for(;!1===s(e[0],e[1],t.getBoard());)e=c();i=t.receiveAttack(...e),null!==i.ship&&(o=i.ship,a+=1)}(t)},getPlayersTurn:()=>l,setPlayersTurn:t=>{l=t},isMoveLegal:function(t,e,n){return!0!==n[t][e].hit},changePlayersTurn:d,findRandomMove:function(){return[Math.floor(10*Math.random()),Math.floor(10*Math.random())]}}};let d,u;const p=()=>d,h=()=>u,f=l(!1,!0),m=l(!0,!1),g=function(){const t=n(),e=y(),o=document.querySelector("main"),i=document.querySelector(".player-one-board"),r=document.querySelector(".player-two-board"),a=document.querySelector(".switch-position"),s=[];let c,l,d=e.getPlayerOneGameboard(),u="init",p=1,h="vertical";function m(t,e){e.innerHTML="",t.forEach((t=>{t.forEach((t=>{!function(t,e){const n=document.createElement("div");n.classList.add("field"),null!==t.ship&&n.classList.add("ship"),null!==t.ship&&e===r&&n.classList.add("hidden"),null!==t.ship&&t.ship.isSunk()&&n.classList.add("sunk"),!0===t.hit&&n.classList.add("hit"),n.board=t.board,n.field=t,s.includes(t.postion)||s.push(t.position),"init"===u?(n.addEventListener("mouseover",E),n.addEventListener("mouseout",S),n.addEventListener("click",L),n.addEventListener("click",k)):"game"===u&&n.addEventListener("click",v),e.appendChild(n)}(t,e)}))}))}function g(t,e){m(t,i),m(e,r)}function v(t){if(t.target.parentElement!==r)return;if(!0!==f.getPlayersTurn())return;if(!0===t.target.field.hit)return;const n=t.target.field.position[0],o=t.target.field.position[1];if(e.play(n,o),e.isGameFinished()){const t=e.getPlayerOneGameboard(),n=e.getPlayerTwoGameboard();g(t.getBoard(),n.getBoard())}else m(t.target.parentElement.board,t.target.parentElement),setTimeout((()=>{e.play(),m(d.getBoard(),i)}),"1500")}function b(n){if(d=e.getPlayerOneGameboard(),i.boardObject=d,p>5)return;if(n.target.parentElement.boardObject!==d)return;const o=Array.from(document.querySelectorAll(".field"));c=n.target.field.position[0],l=n.target.field.position[1];const r=d.getBoard(),a=t.findTargetFields(p,c,l,h,r);let s,u;return!1!==a&&(s=a.map((t=>t.position)),u=o.filter((t=>!0===s.includes(t.field.position)))),u||void 0}function E(t){const e=b(t);e&&e.forEach((t=>t.classList.add("active")))}function S(t){const e=b(t);e&&e.forEach((t=>t.classList.remove("active")))}function L(t){if(p>5||t.target.parentElement===r)return;const n=d,s=d.getBoard(),u=i;!1!==n.placeShip(p,c,l,h)&&(m(s,u),p+=1),p>5&&function(){const t=document.createElement("div");t.classList.add("start-game"),t.classList.add("modal");const n=document.createElement("button");n.classList.add("start-game-button"),n.textContent="Start Game",o.appendChild(t),t.appendChild(n),n.addEventListener("click",(()=>{o.removeChild(t),e.startGame(),a.classList.toggle("hidden")}))}()}function k(){const t=e.getPlayerOneGameboard(),n=e.getPlayerTwoGameboard();p>5&&(u="game"),p<5&&(u="init"),g(t.getBoard(),n.getBoard())}return a.addEventListener("click",(function(){switch(h){case"vertical":h="horizontal";break;case"horizontal":h="vertical"}})),{renderGameboards:g,createEndGamePopup:function(t){const n=document.createElement("div");n.classList.add("end-game"),n.classList.add("modal");const i=document.createElement("p");i.classList.add("end-game-text"),i.textContent=`${t} Won`;const r=document.createElement("button");r.classList.add("new-game-button"),r.textContent="New Game",o.appendChild(n),n.appendChild(i),n.appendChild(r),r.addEventListener("click",(()=>{!function(){const t=document.querySelector(".modal");o.removeChild(t),u="init",p=1,e.initGameboards()}(),a.classList.toggle("hidden")}))},removeFieldsEventListeners:function(){document.querySelectorAll(".field").forEach((t=>{t.removeEventListener("click",v)}))},playerOneDisplay:i,playerTwoDisplay:r}}();function y(){function t(){return!0===d.areAllShipsSunk()||!0===u.areAllShipsSunk()}function e(t){g.createEndGamePopup(t),g.removeFieldsEventListeners()}return{startGame:function(){f.setPlayersTurn(!0),m.setPlayersTurn(!1),u.placeShipsRandomly(5),g.renderGameboards(d.getBoard(),u.getBoard())},play:function(n,o){const i=f.getPlayersTurn(),r=m.getPlayersTurn();if(!0===i?f.attack(u,m,n,o):!0===r&&m.attack(d,f),t()){let t="";!0===d.areAllShipsSunk()&&(t="Player Two"),!0===u.areAllShipsSunk()&&(t="Player One"),e(t)}},endGame:e,isGameFinished:t,initGameboards:function(){const t=g.playerOneDisplay,e=g.playerTwoDisplay;d=n(),u=n(),d.initGameboard(),u.initGameboard(),t.board=d.getBoard(),e.board=u.getBoard(),g.renderGameboards(d.getBoard(),u.getBoard())},getPlayerOneGameboard:p,getPlayerTwoGameboard:h}}y().initGameboards()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,