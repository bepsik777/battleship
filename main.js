(()=>{"use strict";const e=e=>{let t=0;return{getLength:()=>e,hit:()=>(t+=1,t),isSunk:()=>t===e,getNumberOfHits:()=>t}},t=e(1);t.hit(),console.log(t.getLength());const o=()=>{const t=[],o=()=>t;function n(e,t){return{position:[e,t],occupiedByShip:!1,hit:!1,ship:null,board:o()}}function i(e){if(!e)return!1;const t=o();let n=[];const i=[],r=[];return e.forEach((e=>{const o=e.position[0],n=e.position[1];[[o-1,n-1],[o-1,n],[o-1,n+1],[o,n+1],[o+1,n+1],[o+1,n],[o+1,n-1],[o,n-1]].forEach((e=>{!1===a(e[0],e[1])&&r.push(t[e[0]][e[1]])}))})),n=r.filter((t=>!1===e.includes(t))),n.forEach((e=>{i.includes(e)||i.push(e)})),i}function r(e,t,o,n,i){const r=[];for(let s=0;s<e;s++)if("horizontal"===n){if(a(t,o+s))return console.log("out of bounds"),!1;r.push(i[t][o+s])}else if("vertical"===n){if(a(t+s,o))return console.log("out of bounds"),!1;r.push(i[t+s][o])}return r}function a(e,t){return e<0||e>9||t<0||t>9}function s(e){return!0===e.occupiedByShip}function l(e,t){return console.log(e,"target fields"),!!e&&!e.some(s)&&!t.some(s)}function c(t,n,a,s="horizontal"){const c=r(t,n,a,s,o());if(!l(c,i(c)))return!1;const d=e(t);return c.forEach((e=>{e.occupiedByShip=!0,e.ship=d})),d}return{createField:n,initGameboard:function(){for(let e=0;e<10;e++){const o=[];for(let t=0;t<10;t++)o.push(n(e,t));t.push(o)}},printBoard:function(){t.forEach((e=>{let t="";e.forEach((e=>{e.occupiedByShip||e.hit?!e.occupiedByShip&&e.hit?t+="|  -  |":e.occupiedByShip&&!e.hit?t+="|  O  |":e.occupiedByShip&&e.hit&&(t+="|  X  |"):t+=`| ${e.position} |`})),console.log(t)}))},getBoard:o,findTargetFields:r,findNeighbourFields:i,canShipBePlaced:l,placeShip:c,receiveAttack:function(e,o){return a(e,o)?(console.log("out of bounds"),!1):t[e][o].hit?(console.log("field already hit"),!1):(null!==t[e][o].ship&&t[e][o].ship.hit(),t[e][o].hit=!0,t[e][o])},areAllShipsSunk:function(){const e=[];return t.forEach((t=>{const o=t.filter((e=>!0===e.occupiedByShip));e.push(...o)})),!!e.every((e=>!0===e.hit))},placeShipsRandomly:function(e){const t=[];let o=1;for(;t.length!==e;){const e=Math.floor(10*Math.random()),n=Math.floor(10*Math.random());let i;switch(Math.floor(2*Math.random())){case 1:i="vertical";break;case 0:i="horizontal"}const r=c(o,e,n,i);!1!==r&&(t.push(r),o++)}}}};let n,i,r,a=0;function s(e,t,o){return!(e>9||e<0||t<0||t>9)&&!0!==o[e][t].hit}function l(){return[Math.floor(10*Math.random()),Math.floor(10*Math.random())]}function c(e,t,o){let n=e.position[0],i=e.position[1],r=t.position[0],a=t.position[1];const l=[];let c;if(n===r?c="horizontal":i===a&&(c="vertical"),console.log(c),"horizontal"===c){i>a&&(n=t.position[0],i=t.position[1],r=e.position[0],a=e.position[1]);const o=[n,i-1],s=[r,a+1];l.push(o,s)}else if("vertical"===c){n>r&&(n=t.position[0],i=t.position[1],r=e.position[0],a=e.position[1]);const o=[n-1,i],s=[r+1,a];l.push(o,s)}console.log(l,"possible fields");const d=l.filter((e=>s(e[0],e[1],o.getBoard())));return console.log(d,"target fields"),d}const d=(e,t)=>{const o=e;let d=t;function u(e){const t=e.getPlayersTurn();switch(d){case!0:d=!1;break;case!1:d=!0}switch(t){case!0:e.setPlayersTurn(!1);break;case!1:e.setPlayersTurn(!0)}}return{attack:function(e,t,p,h){if(u(t),!o)return console.log("player one turn",d),console.log("player two turn",t.getPlayersTurn()),e.receiveAttack(p,h);console.log("player one turn",d),console.log("player two turn",t.getPlayersTurn()),function(e){if(void 0!==n&&!0===n.isSunk()&&(a=0,n=void 0),1===a){const t=function(e,t){const o=e.position[0],n=e.position[1],i=[[o,n+1],[o,n-1],[o+1,n],[o-1,n]].filter((e=>s(e[0],e[1],t.getBoard())));return i}(i,e),o=t[Math.floor(Math.random()*t.length)];return r=e.receiveAttack(...o),null!==r.ship&&(a+=1),void console.log(n)}if(a>1){console.log("hitedField",i,"temp hited field",r);const t=c(i,r,e),o=t[Math.floor(Math.random()*t.length)],n=e.receiveAttack(...o);return void(null!==n.ship&&(r=n,a+=1))}let t=l();for(;!1===s(t[0],t[1],e.getBoard());)t=l();i=e.receiveAttack(...t),null!==i.ship&&(n=i.ship,a+=1)}(e)},getPlayersTurn:()=>d,setPlayersTurn:e=>{d=e},isMoveLegal:function(e,t,o){return!0!==o[e][t].hit},changePlayersTurn:u,findRandomMove:function(){return[Math.floor(10*Math.random()),Math.floor(10*Math.random())]}}};let u,p;const h=()=>u,f=()=>p,m=d(!1,!0),g=d(!0,!1),y=function(){const e=o(),t=b(),n=document.querySelector("main"),i=document.querySelector(".player-one-board"),r=document.querySelector(".player-two-board"),a=document.querySelector(".switch-position"),s=[];let l,c,d=t.getPlayerOneGameboard(),u="init",p=1,h="vertical";function f(e,t){t.innerHTML="",e.forEach((e=>{e.forEach((e=>{!function(e,t){const o=document.createElement("div");o.classList.add("field"),null!==e.ship&&o.classList.add("ship"),null!==e.ship&&t===r&&o.classList.add("hidden"),null!==e.ship&&e.ship.isSunk()&&o.classList.add("sunk"),!0===e.hit&&o.classList.add("hit"),o.board=e.board,o.field=e,s.includes(e.postion)||s.push(e.position),"init"===u?(o.addEventListener("mouseover",E),o.addEventListener("mouseout",S),o.addEventListener("click",G),o.addEventListener("click",L)):"game"===u&&o.addEventListener("click",y),t.appendChild(o)}(e,t)}))}))}function g(e,t){f(e,i),f(t,r)}function y(e){if(e.target.parentElement!==r)return;if(!0!==m.getPlayersTurn())return;if(!0===e.target.field.hit)return;const o=e.target.field.position[0],n=e.target.field.position[1];if(t.play(o,n),t.isGameFinished()){const e=t.getPlayerOneGameboard(),o=t.getPlayerTwoGameboard();g(e.getBoard(),o.getBoard())}else f(e.target.parentElement.board,e.target.parentElement),setTimeout((()=>{t.play(),f(d.getBoard(),i)}),"1500")}function v(o){if(d=t.getPlayerOneGameboard(),i.boardObject=d,p>5)return;if(o.target.parentElement.boardObject!==d)return;const n=Array.from(document.querySelectorAll(".field"));l=o.target.field.position[0],c=o.target.field.position[1];const r=d.getBoard(),a=e.findTargetFields(p,l,c,h,r);let s,u;return!1!==a&&(s=a.map((e=>e.position)),u=n.filter((e=>!0===s.includes(e.field.position)))),u||void 0}function E(e){const t=v(e);t&&t.forEach((e=>e.classList.add("active")))}function S(e){const t=v(e);t&&t.forEach((e=>e.classList.remove("active")))}function G(e){if(p>5||e.target.parentElement===r)return;const o=d,s=d.getBoard(),u=i;!1!==o.placeShip(p,l,c,h)&&(f(s,u),p+=1),p>5&&function(){const e=document.createElement("div");e.classList.add("start-game"),e.classList.add("modal");const o=document.createElement("button");o.classList.add("start-game-button"),o.textContent="Start Game",n.appendChild(e),e.appendChild(o),o.addEventListener("click",(()=>{n.removeChild(e),t.startGame(),a.classList.toggle("hidden")}))}()}function L(){const e=t.getPlayerOneGameboard(),o=t.getPlayerTwoGameboard();p>5&&(u="game"),p<5&&(u="init"),g(e.getBoard(),o.getBoard())}return a.addEventListener("click",(function(){switch(h){case"vertical":h="horizontal";break;case"horizontal":h="vertical"}})),{renderGameboards:g,createEndGamePopup:function(e){const o=document.createElement("div");o.classList.add("end-game"),o.classList.add("modal");const i=document.createElement("p");i.classList.add("end-game-text"),i.textContent=`${e} Won`;const r=document.createElement("button");r.classList.add("new-game-button"),r.textContent="New Game",n.appendChild(o),o.appendChild(i),o.appendChild(r),r.addEventListener("click",(()=>{!function(){const e=document.querySelector(".modal");n.removeChild(e),u="init",p=1,t.initGameboards()}(),a.classList.toggle("hidden")}))},removeFieldsEventListeners:function(){document.querySelectorAll(".field").forEach((e=>{e.removeEventListener("click",y)}))},playerOneDisplay:i,playerTwoDisplay:r}}();function b(){function e(){return!0===u.areAllShipsSunk()||!0===p.areAllShipsSunk()}function t(e){y.createEndGamePopup(e),y.removeFieldsEventListeners()}return{startGame:function(){m.setPlayersTurn(!0),g.setPlayersTurn(!1),p.placeShipsRandomly(5),y.renderGameboards(u.getBoard(),p.getBoard())},play:function(o,n){const i=m.getPlayersTurn(),r=g.getPlayersTurn();if(!0===i?m.attack(p,g,o,n):!0===r&&g.attack(u,m),e()){let e="";!0===u.areAllShipsSunk()&&(e="Player Two"),!0===p.areAllShipsSunk()&&(e="Player One"),t(e)}},endGame:t,isGameFinished:e,initGameboards:function(){const e=y.playerOneDisplay,t=y.playerTwoDisplay;u=o(),p=o(),u.initGameboard(),p.initGameboard(),e.board=u.getBoard(),t.board=p.getBoard(),y.renderGameboards(u.getBoard(),p.getBoard())},getPlayerOneGameboard:h,getPlayerTwoGameboard:f}}const v=b();v.initGameboards();const E=v.getPlayerOneGameboard(),S=v.getPlayerOneGameboard().getBoard();console.log(E.getBoard()),E.printBoard(),console.log(c(S[6][7],S[5][7],E)),window.startGame=v.startGame,window.endGame=v.endGame})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,